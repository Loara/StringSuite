/*
    This file is part of Encmetric.
    Copyright (C) 2021 Paolo De Donato.

    Encmetric is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Encmetric is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Encmetric. If not, see <http://www.gnu.org/licenses/>.
*/

extern "C"{
#include <windows.h>
}
#include <strsuite/encmetric/enc_c.hpp>
#include <strsuite/io/enc_io_core.hpp>
#include <strsuite/io/enc_io_buffer.hpp>

using namespace sts::literals;

size_t sts::def_strlen(const sts::byte *b){
    int i = lstrlenW(reinterpret_cast<LPCWSTR>(b));
    if(i >= 0)
        return static_cast<size_t>(i);
    else
        throw sts::IOFail{};
}

struct Windows_syscalls{
    HANDLE fd;
    Windows_syscalls(HANDLE f) : fd{f} {}

    static constexpr size_t buffer_size=64;

    size_t read_wrap(sts::byte *v, size_t l){
        DWORD chrr;
        auto err = ReadConsoleW(fd, v, l/2, &chrr, NULL);
        if(err == 0){
            auto errnoo = GetLastError();
            if(errnoo == ERROR_IO_PENDING)
                throw sts::IOAGAIN{};
            else
                throw sts::IOFail{};
        }
        else if(chrr == 0)
            throw sts::IOEOF{};
        return 2 * static_cast<size_t>(chrr);
    }
    size_t write_wrap(const sts::byte *v, size_t l){
        DWORD chrr;
        auto err = WriteConsoleW(fd, v, l/2, &chrr, NULL);
        if(err == 0){
            auto errnoo = GetLastError();
            if(errnoo == ERROR_IO_PENDING)
                throw sts::IOAGAIN{};
            else
                throw sts::IOFail{};
        }
        else if(chrr == 0)
            throw sts::IOEOF{};
        return 2 * static_cast<size_t>(chrr);
    }

    void discard_all_input(){
        while(true){
            DWORD err = WaitForSingleObject(fd, 0);
            if(err == WAIT_TIMEOUT || err == WAIT_FAILED){
                break;
            }
            sts::byte dis[60];
            size_t red = read_wrap(dis, 60);
            if(red < 60)
                break;
            /*
            byte chr[4];
            sts::tchar_pt<sts::UTF8> o{chr};
            do{
                try{
                    do_char_read(o, 4);
                }
                catch(...){
                    return;
                }
            }
            while(chr[0] != byte{'\n'});
            */
        }
        /*
            sts::byte rc[] = {sts::byte{0x0d}, sts::byte{0x00}};
            sts::byte nl[] = {sts::byte{0x0a}, sts::byte{0x00}};
            sts::byte buf[4];
            sts::tchar_pt<sts::UTF16LE> o{buf};
            bool hr=false, hn=false;
            do{
                try{
                    do_char_read(o, 4);
                }
                catch(...){
                    return;
                }
                if(buf[0] == rc[0] && buf[1] == rc[1])
                    hr = true;
                else if(hr && buf[0] == nl[0] && buf[1] == nl[1])
                    hn = true;
                else{
                    hr = false;
                    hn= false;
                }
            }
            while(!hr || !hn);
            */
    }

    sts::adv_string_view<sts::UTF16LE> do_newline() const noexcept{ return u"\r\n"_asv;}
};



sts::InputStream &sts::get_console_stdin(){
    static Console_istream<Windows_syscalls> input{Windows_syscalls{GetStdHandle(STD_INPUT_HANDLE)}};
    return input;
}

sts::OutputStream &sts::get_console_stdout(){
    static Console_ostream<Windows_syscalls> input{Windows_syscalls{GetStdHandle(STD_OUTPUT_HANDLE)}};
    return input;
}

sts::OutputStream &sts::get_console_stderr(){
    static Console_ostream<Windows_syscalls> input{Windows_syscalls{GetStdHandle(STD_ERROR_HANDLE)}};
    return input;
}



sts::param_helper::param_helper(int, const char **) : argn{0}, args{nullptr} {
    auto pointer = GetCommandLineW();
    auto ret = CommandLineToArgvW(pointer, &argn);
    args = const_cast<const sts::byte **>(reinterpret_cast<sts::byte **>(ret));
}

sts::param_helper::~param_helper() {
    LocalFree(args);
}

