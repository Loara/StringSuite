/*
    This file is part of Encmetric.
    Copyright (C) 2021 Paolo De Donato.

    Encmetric is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Encmetric is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Encmetric. If not, see <http://www.gnu.org/licenses/>.
*/

extern "C"{
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <poll.h>
}
#include <strsuite/io/enc_io_core.hpp>
#include <strsuite/encmetric/enc_c.hpp>

using sts::byte;
using namespace sts::literals;

/*
 * If EWOULDBLOCK != EAGAIN redefine it as case EWOULDBLOCK:
 */

#define case_EWOULDBLOCK

size_t sts::def_strlen(const byte *b){
    return strlen(reinterpret_cast<const char *>(b));
}

struct Linux_syscalls{
    int fd;
    Linux_syscalls(int f) : fd{f} {}

    /*
     * Return must be >0
     * if ==0 then repeat must be true
     */
    size_t read_wrap(byte *v, size_t l){
        ssize_t wt = read(fd, v, l);
        if(wt < 0){
            switch(errno){
                case EAGAIN:
                case_EWOULDBLOCK
                    throw sts::IOAGAIN{};
                case EINTR:
                    return 0;
                default:
                    throw sts::IOFail{};
            }
        }
        else if(wt == 0)
            throw sts::IOEOF{};
        return static_cast<size_t>(wt);
    }

    size_t write_wrap(const byte *v, size_t l){
        ssize_t wt = write(fd, v, l);
        if(wt < 0){
            switch(errno){
                case EAGAIN:
                case_EWOULDBLOCK
                    throw sts::IOAGAIN{};
                case EINTR:
                    return 0;
                case EDQUOT:
                case EFBIG:
                    throw sts::IOEOF{};
                default:
                    throw sts::IOFail{};
            }
        }
        else if(wt == 0)
            throw sts::IOEOF{};
        return static_cast<size_t>(wt);
    }

    void discard_all_input(){
        pollfd readany{};
        while(true){
            readany.fd = fd;
            readany.events = POLLIN;
            int err = poll(&readany, 1, 0);
            if(err == -1 || (readany.revents & POLLIN) == 0){
                break;
            }
            byte dis[60];
            size_t red = read_wrap(dis, 60);
            if(red < 60)
                break;
            /*
            byte chr[4];
            sts::tchar_pt<sts::UTF8> o{chr};
            do{
                try{
                    do_char_read(o, 4);
                }
                catch(...){
                    return;
                }
            }
            while(chr[0] != byte{'\n'});
            */
        }
    }

    sts::adv_string_view<sts::UTF8> do_newline() const noexcept{ return u8"\n"_asv;}
};

sts::InputStream &sts::get_console_stdin(){
    static Console_istream<Linux_syscalls> input{Linux_syscalls{STDIN_FILENO}};
    return input;
}

sts::OutputStream &sts::get_console_stdout(){
    static Console_ostream<Linux_syscalls> input{Linux_syscalls{STDOUT_FILENO}};
    return input;
}

sts::OutputStream &sts::get_console_stderr(){
    static Console_ostream<Linux_syscalls> input{Linux_syscalls{STDERR_FILENO}};
    return input;
}

sts::param_helper::param_helper(int n, const char **c) : argn{n}, args{reinterpret_cast<const byte **>(c)} {}

sts::param_helper::~param_helper() {}

/*
 * Files
 */

