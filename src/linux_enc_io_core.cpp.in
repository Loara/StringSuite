extern "C"{
#include <unistd.h>
}
#include <strsuite/encmetric/enc_io_core.hpp>
using namespace sts;

size_t sts::raw_stdin_readbytes(byte *b, size_t siz){
	ssize_t tret = read(STDIN_FILENO, b, siz);
	if(tret < 0){
        if(errno == EAGAIN || errno == EWOULDBLOCK)
            return 0;
        else
            throw IOException{};
	}
	return static_cast<size_t>(tret);
}
size_t sts::raw_stdout_writebytes(const byte *b, size_t siz){
	ssize_t tret = write(STDOUT_FILENO, b, siz);
	if(tret < 0)
        throw IOException{};
    return static_cast<size_t>(tret);
}
size_t sts::raw_stderr_writebytes(const byte *b, size_t siz){
	ssize_t tret = write(STDERR_FILENO, b, siz);
	if(tret < 0)
        throw IOException{};
    return static_cast<size_t>(tret);
}

size_t sts::raw_newline(){
    byte ar[] = {byte{0x0a}};
    return raw_stdout_writebytes(ar, 1);
}

sts::param_helper::param_helper(int n, const char **c) : argn{n}, args{reinterpret_cast<const byte **>(c)} {}

sts::param_helper::~param_helper() {}

